exit
@root
@root = Backup::ROOT_STORAGE
@root
exit
Backup::ROOT_STORAGE + file_name
Backup::ROOT_STORAGE + storage_path[0] + file_name
exit
reload!
Backup::ROOT_STORAGE + storage_path[0] + file_name
Backup::ROOT_STORAGE + file_name
exit
Backup::ROOT_STORAGE + storage_path[0] + file_name
Backup::ROOT_STORAGE + file_name
file_name
storage_path
exit
Backup::ROOT_STORAGE + storage_path[0] + file_name
Backup::ROOT_STORAGE + file_name
storage_path.empty?
exit
Backup::ROOT_STORAGE + storage_path[0] + file_name
Backup::ROOT_STORAGE + file_name
storage_path.empty?
exit
Backup::ROOT_STORAGE + storage_path[0] + file_name
storage_path.empty?
exit
Backup::ROOT_STORAGE + file_name
root + file_name
root = Backup::ROOT_STORAGE if storage_path.empty?
oot = Backup::ROOT_STORAGE if storage_path.empty?
root + storage_path[0] + file_name
root + file_name
storage_path
root
exit
Backup::ROOT_STORAGE
file_name
storage_path
Backup::ROOT_STORAGE + storage_path[0] + file_name
exit
Backup::ROOT_STORAGE + storage_path[0] + file_name
exit
Backup::ROOT_STORAGE + storage_path[0] + file_name
exit
Backup::ROOT_STORAGE + storage_path[0] + file_name
storage_path
exit
storage_path[0]
storage_path
file_name
exit
file_name
storage_path
exit
storage_path
storage_path.empty?
exit
storage_path.empty?
storage_path.nil?
storage_path
storage_path[
exit
storage_path[0]
storage_path
exit
storage_path
exit
storage_path
exit
Backup::ROOT_STORAGE
storage_path
exit
dede
c
exit
endpoint
exit
Backups::ROOT_BACKUP_STORAGE
storage_path
ROOT_BACKUP_STORAGE
exit
ROOT_BACKUP_STORAGE
storage_path
exit
exxit
root_storage + storage_path + file_name
exit
@root_storage
exit
response_parsed
exit
rounds
exit
parsed = JSON.parse rounds, symbolize_names: true
rounds
exit
parsed = JSON.parse rounds, symbolize_names: true
rounds.first
rounds.count
rounds.counr
rounds
c
exit
rounds[0][:rodada_id]
rounds[0]
rounds
exit
JSON.parse response, symbolize_names: true
response
exit
exxit
rodada
exit
rodada
c
endpoint
exit
rodada
exit
content.empty?
content.nil?
content.null?
content.class
content
exit
file.puts(content)
File.open(file)
exit
file.puts(content)
content
endpoint
local
exit
endpoint.upcase
endpoint
file.upcase
file
c
response
exit
content
c
response
exit
content
file.puts(content)
exit
file.puts(content)
file = File.new(local + endpoint + '.json', 'w')
content
local
endpoint
exit
content
local
file.puts(content)
file = File.new(local + content + '.json', 'w')
content
exit
file.puts(content)
file = File.new(local + content + '.json', 'w')
local + content
local
exit
clubes
clubs
response
exit
clubs
obj
exit
current_date >= round_start_date
round_start_date = Date.parse(round[:inicio]).strftime("%Y-%m-%d")
exit
Date.today.strftime("%Y-%m-%d")
Date.today
round[:inicio]
round[:inicio.strftime("%Y-%m-%d")]
round[:inicio].strftime("%Y-%m-%d")
round[:inicio]
exit
current_date
round[:inicio]
current_date < round[:inicio]
exit
round[:inicio]
current_date < round[:inicio]
current_date > round[:inicio]
current_date >= round[:inicio]
exit
 data_rodada = Date.parse(round[:inicio])
data_rodada
exit
round[:inicio].strftime("%Y-%m-%d")
round[:inicio]
data_atual >= round[:inicio]
data_atual
c
exit
c
exit
rodada_atual
c
rodada_atual
c
rodada_atual
exit
rounds_parsed[rodada_atual][:inicio]
round[rodada_atual]
round[rodada_atual][:inicio]
rodada_atual
round[:rodada_id]
exit
round
index
rodada_atual
exit
rodada_atual
index
exit
index
exit
rounds_parsed[rodada_atual][:inicio] > data_atual
data_atual = Date.parse('2020-08-10').strftime("%Y-%m-%d")
rounds_parsed[rodada_atual][:inicio] > data_atual
rounds_parsed[rodada_atual][:inicio]
rodada_atual = 5
rounds_parsed[0][:inicio]
rounds_parsed[0][:rodada_id][:inicio]
rounds_parsed[0][:rodada_id]
rounds_parsed[0]
rounds_parsed[0][:rodada_id][:inicio]
rounds_parsed.first[:inicio]
rounds_parsed[0]
round
round[0]
prev_round
round
exit
prev_round
next_round
c
prev_round
next_round
exit
prev_round
next_round
exit
date_now < round[:inicio]
date_now > round[:inicio]
round[:inicio]
date_now
exit
date_now
